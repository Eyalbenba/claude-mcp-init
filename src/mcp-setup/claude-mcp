#!/usr/bin/env bash

# Claude MCP Configuration Tool
# A user-friendly CLI for configuring MCP servers

# Require Bash 4+ for associative arrays
if [ "${BASH_VERSION%%.*}" -lt 4 ]; then
    echo "Error: This script requires Bash 4.0 or later"
    echo "Current version: $BASH_VERSION"
    echo ""
    echo "On macOS, install with: brew install bash"
    echo "Then run with: /opt/homebrew/bin/bash $0"
    exit 1
fi

set -e  # Exit on any error

# =============================================================================
# Configuration - Package Manager Detection
# =============================================================================

# Package manager paths and detection
# Priority: Environment variable > Auto-detection > Fallback

detect_package_manager() {
    # Check if user has set preference in environment
    if [ -n "${PACKAGE_MANAGER:-}" ]; then
        echo "$PACKAGE_MANAGER"
        return
    fi
    
    # Auto-detect available package managers
    if command -v uvx >/dev/null 2>&1; then
        echo "uvx"
    elif command -v npx >/dev/null 2>&1; then
        echo "npx"
    else
        echo "uvx"  # Default fallback
    fi
}

# Set package manager paths
setup_package_manager() {
    local pkg_manager="$1"
    
    case "$pkg_manager" in
        "uvx")
            # Auto-detect uvx path or use manual override
            if [ -n "${UVX_PATH_OVERRIDE:-}" ]; then
                PACKAGE_PATH="$UVX_PATH_OVERRIDE"
            elif command -v uvx >/dev/null 2>&1; then
                PACKAGE_PATH="uvx"
            elif [ -f "/Users/$(whoami)/.local/bin/uvx" ]; then
                PACKAGE_PATH="/Users/$(whoami)/.local/bin/uvx"
            elif [ -f "/opt/homebrew/bin/uvx" ]; then
                PACKAGE_PATH="/opt/homebrew/bin/uvx"
            elif [ -f "/usr/local/bin/uvx" ]; then
                PACKAGE_PATH="/usr/local/bin/uvx"
            else
                PACKAGE_PATH="/Users/$(whoami)/.local/bin/uvx"
            fi
            
            # Verify uvx exists
            if [ "$PACKAGE_PATH" = "uvx" ]; then
                if ! command -v uvx >/dev/null 2>&1; then
                    print_error "uvx not found in PATH"
                    print_status "Install uvx or set PACKAGE_MANAGER=npx in .env-mcp"
                    print_status "You can find uvx with: which uvx"
                    exit 1
                fi
            elif [ ! -f "$PACKAGE_PATH" ]; then
                print_error "uvx not found at $PACKAGE_PATH"
                print_status "Install uvx or set PACKAGE_MANAGER=npx in .env-mcp"
                exit 1
            fi
            ;;
        "npx")
            if command -v npx >/dev/null 2>&1; then
                PACKAGE_PATH="npx"
            else
                print_error "npx not found in PATH"
                print_status "Install Node.js/npm or set PACKAGE_MANAGER=uvx in .env-mcp"
                exit 1
            fi
            ;;
        *)
            print_error "Unknown package manager: $pkg_manager"
            print_status "Set PACKAGE_MANAGER to either 'uvx' or 'npx' in .env-mcp"
            exit 1
            ;;
    esac
}

# Initialize package manager (will be set after loading environment)
PACKAGE_MANAGER=""
PACKAGE_PATH=""

# GitHub MCP Configuration - Choose one:
# "copilot" = Use GitHub Copilot MCP API (HTTP transport, requires GITHUB_PAT)
# "uvx" = Use uvx github-mcp-server (stdio transport, requires GITHUB_TOKEN)
GITHUB_MCP_TYPE="copilot"  # <-- UPDATE THIS: "copilot" or "uvx"

# =============================================================================
# Colors and UI
# =============================================================================

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Function to print colored output
print_header() {
    echo -e "${PURPLE}╔══════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║${WHITE}                          Claude MCP Configuration Tool                       ${PURPLE}║${NC}"
    echo -e "${PURPLE}╚══════════════════════════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${CYAN}▶${NC} $1"
}

# =============================================================================
# MCP Server Definitions
# =============================================================================

declare -A MCP_SERVERS
declare -A MCP_DESCRIPTIONS
declare -A MCP_REQUIREMENTS

# Define available MCP servers
MCP_SERVERS[aws]="AWS CloudWatch Logs"
MCP_DESCRIPTIONS[aws]="Access AWS CloudWatch logs and metrics"
MCP_REQUIREMENTS[aws]="AWS_PROFILE, AWS_REGION"

MCP_SERVERS[snowflake]="Snowflake Database"
MCP_DESCRIPTIONS[snowflake]="Query Snowflake databases with natural language"
MCP_REQUIREMENTS[snowflake]="SNOWFLAKE_ACCOUNT, SNOWFLAKE_USER, SNOWFLAKE_PASSWORD, SNOWFLAKE_DATABASE, SNOWFLAKE_WAREHOUSE"

MCP_SERVERS[linear]="Linear Project Management"
MCP_DESCRIPTIONS[linear]="Manage Linear issues and projects (no API key needed)"
MCP_REQUIREMENTS[linear]="None (remote server)"

MCP_SERVERS[notion]="Notion Documentation"
MCP_DESCRIPTIONS[notion]="Access and search Notion pages and databases"
MCP_REQUIREMENTS[notion]="NOTION_API_KEY"

MCP_SERVERS[github]="GitHub Integration"
MCP_DESCRIPTIONS[github]="Interact with GitHub repositories and issues"
MCP_REQUIREMENTS[github]="GITHUB_PAT (for Copilot) or GITHUB_TOKEN (for uvx)"

MCP_SERVERS[tavily]="Tavily Web Search"
MCP_DESCRIPTIONS[tavily]="Perform web searches and extract content"
MCP_REQUIREMENTS[tavily]="TAVILY_API_KEY"

MCP_SERVERS[zen]="Zen AI Enhancement"
MCP_DESCRIPTIONS[zen]="Enhanced AI capabilities with OpenAI models"
MCP_REQUIREMENTS[zen]="OPENAI_API_KEY, zen-mcp-server directory"

MCP_SERVERS[mongodb]="MongoDB Database"
MCP_DESCRIPTIONS[mongodb]="Interact with MongoDB databases"
MCP_REQUIREMENTS[mongodb]="MDB_MCP_CONNECTION_STRING"

MCP_SERVERS[context7]="Context7 Code Docs"
MCP_DESCRIPTIONS[context7]="Up-to-date code documentation for any prompt"
MCP_REQUIREMENTS[context7]="None (remote server or npm package)"

MCP_SERVERS[interrupt]="Interrupt User"
MCP_DESCRIPTIONS[interrupt]="Ask human for context and additional information"
MCP_REQUIREMENTS[interrupt]="None (uvx package)"

# =============================================================================
# Helper Functions
# =============================================================================

show_usage() {
    echo "Usage: claude-mcp <command> [options]"
    echo ""
    echo "Commands:"
    echo "  configure    Configure MCP servers interactively"
    echo "  list         List configured MCP servers"
    echo "  remove       Remove MCP servers"
    echo "  status       Check MCP server status"
    echo "  help         Show this help message"
    echo ""
    echo "Scope Options:"
    echo "  local        Available only to you in the current project (default)"
    echo "  project      Shared with everyone in the project via .mcp.json file"
    echo "  user         Available to you across all projects"
    echo ""
    echo "Examples:"
    echo "  claude-mcp configure"
    echo "  claude-mcp list"
    echo "  claude-mcp remove"
    echo ""
}

get_scope_selection() {
    echo "" >&2
    print_step "Select Configuration Scope:" >&2
    echo "" >&2
    echo -e "${WHITE}1.${NC} ${CYAN}local${NC} - Available only to you in the current project (default)" >&2
    echo -e "${WHITE}2.${NC} ${CYAN}project${NC} - Shared with everyone in the project via .mcp.json file" >&2
    echo -e "${WHITE}3.${NC} ${CYAN}user${NC} - Available to you across all projects" >&2
    echo "" >&2
    echo -n "Choose scope (1-3, default: 1): " >&2
    read -r scope_choice
    
    case "$scope_choice" in
        "2")
            echo "project"
            ;;
        "3")
            echo "user"
            ;;
        "1"|"")
            echo "local"
            ;;
        *)
            print_warning "Invalid scope selection. Using default (local)..." >&2
            echo "local"
            ;;
    esac
}

get_package_manager_selection() {
    echo "" >&2
    print_step "Select Package Manager:" >&2
    echo "" >&2
    echo -e "${WHITE}1.${NC} ${CYAN}uvx${NC} - Fast Python package runner (recommended)" >&2
    echo -e "${WHITE}2.${NC} ${CYAN}npx${NC} - Node.js package runner (widely available)" >&2
    echo "" >&2
    echo -n "Choose package manager (1-2, default: 1): " >&2
    read -r package_choice
    
    case "$package_choice" in
        "2")
            echo "npx"
            ;;
        "1"|"")
            echo "uvx"
            ;;
        *)
            print_warning "Invalid package manager selection. Using default (uvx)..." >&2
            echo "uvx"
            ;;
    esac
}

# Find .env-mcp file by searching up and down the directory tree
find_env_file() {
    local start_dir="$(pwd)"
    local current_dir="$start_dir"
    
    # First, search UP the directory tree (current and parent directories)
    while [ "$current_dir" != "/" ]; do
        if [ -f "$current_dir/.env-mcp" ]; then
            echo "$current_dir/.env-mcp"
            return 0
        fi
        current_dir="$(dirname "$current_dir")"
    done
    
    # Check root directory
    if [ -f "/.env-mcp" ]; then
        echo "/.env-mcp"
        return 0
    fi
    
    # If not found going up, search DOWN from the starting directory
    # Look for .env-mcp in subdirectories (up to 3 levels deep for performance)
    local found_file
    found_file=$(find "$start_dir" -maxdepth 3 -name ".env-mcp" -type f 2>/dev/null | head -1)
    
    if [ -n "$found_file" ]; then
        echo "$found_file"
        return 0
    fi
    
    return 1
}

check_env_file() {
    # Temporarily disable exit on error for find_env_file
    set +e
    ENV_FILE_PATH=$(find_env_file)
    local find_result=$?
    set -e
    
    if [ $find_result -ne 0 ]; then
        print_error ".env-mcp file not found in current directory or any parent directories"
        print_status "Please create .env-mcp file with your environment variables"
        print_status "You can copy from .env-mcp.example as a starting point"
        exit 1
    fi
    print_status "Found .env-mcp at: $ENV_FILE_PATH"
}

load_env() {
    print_status "Loading environment variables from $ENV_FILE_PATH..."
    set -a && source "$ENV_FILE_PATH" && set +a
    print_success "Environment variables loaded successfully"
}

check_requirements() {
    local server_key="$1"
    local requirements="${MCP_REQUIREMENTS[$server_key]}"

    # Handle special cases
    case "$requirements" in
        "None (remote server)"|"None (remote server or npm package)"|"None (uvx package)")
            return 0
            ;;
        "OPENAI_API_KEY, zen-mcp-server directory")
            if [ -z "$OPENAI_API_KEY" ]; then
                return 1
            fi
            # Check if OPENAI_API_KEY is still a placeholder
            case "$OPENAI_API_KEY" in
                "your-"*|"your_"*|*"your-"*|*"placeholder"*|*"change-me"*|*"example"*)
                    return 1
                    ;;
            esac
            # Look for zen-mcp-server in mcp-setup directory
            local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
            local zen_dir="$script_dir/zen-mcp-server"
            if [ ! -d "$zen_dir" ]; then
                return 1
            fi
            # Check if zen directory has basic files (server.py and run-server.sh)
            # Don't check .zen_venv as we can rebuild it if needed
            if [ ! -f "$zen_dir/server.py" ] || [ ! -f "$zen_dir/run-server.sh" ]; then
                return 1
            fi
            return 0
            ;;
        *"("*|*")"*)
            # Handle requirements with parentheses (like GitHub)
            case "$server_key" in
                "github")
                    if [ "$GITHUB_MCP_TYPE" = "copilot" ]; then
                        if [ -z "$GITHUB_PAT" ]; then
                            return 1
                        fi
                        # Check if GITHUB_PAT is still a placeholder
                        case "$GITHUB_PAT" in
                            "your-"*|"your_"*|*"your-"*|*"placeholder"*|*"change-me"*|*"example"*)
                                return 1
                                ;;
                        esac
                    else
                        if [ -z "$GITHUB_TOKEN" ]; then
                            return 1
                        fi
                        # Check if GITHUB_TOKEN is still a placeholder
                        case "$GITHUB_TOKEN" in
                            "your-"*|"your_"*|*"your-"*|*"placeholder"*|*"change-me"*|*"example"*)
                                return 1
                                ;;
                        esac
                    fi
                    return 0
                    ;;
                *)
                    return 1
                    ;;
            esac
            ;;
        *)
            # Handle normal comma-separated requirements
            IFS=', ' read -ra REQUIRED_VARS <<< "$requirements"
            for var in "${REQUIRED_VARS[@]}"; do
                # Use eval for indirect variable expansion
                local var_value
                eval "var_value=\"\$$var\""
                if [ -z "$var_value" ]; then
                    return 1
                fi
                # Check if value is still a placeholder from .env-mcp.example
                case "$var_value" in
                    "your-"*|"your_"*|*"your-"*|*"placeholder"*|*"change-me"*|*"example"*)
                        return 1
                        ;;
                esac
            done
            return 0
            ;;
    esac
}

# =============================================================================
# Main Functions
# =============================================================================

show_server_menu() {
    echo ""
    print_step "Available MCP Servers:"
    echo ""
    
    local index=1
    local server_keys=()
    
    for key in "${!MCP_SERVERS[@]}"; do
        server_keys+=("$key")
    done
    
    # Sort server keys for consistent display
    IFS=$'\n' sorted_keys=($(sort <<<"${server_keys[*]}"))
    unset IFS
    
    for key in "${sorted_keys[@]}"; do
        local name="${MCP_SERVERS[$key]}"
        local desc="${MCP_DESCRIPTIONS[$key]}"
        local reqs="${MCP_REQUIREMENTS[$key]}"
        
        # Check if requirements are met
        if check_requirements "$key"; then
            local status="${GREEN}✓ Ready${NC}"
        else
            local status="${YELLOW}⚠ Missing requirements${NC}"
        fi

        echo -e "${WHITE}$(printf '%2d.' $index)${NC} ${CYAN}$name${NC} $desc"
        echo -e "     Status: $status"
        echo -e "     Requirements: ${YELLOW}$reqs${NC}"
        echo ""
        
        index=$((index + 1))
    done
    
    echo -e "${WHITE}$(printf '%2d.' $index)${NC} ${GREEN}Configure All Available${NC}"
    echo -e "${WHITE}$(printf '%2d.' $((index + 1)))${NC} ${RED}Exit${NC}"
    echo ""
}

configure_server() {
    local server_key="$1"
    local scope="${2:-local}"
    local server_name="${MCP_SERVERS[$server_key]}"
    
    print_step "Configuring $server_name (scope: $scope)..."
    
    case "$server_key" in
        "aws")
            configure_aws_server "$scope"
            ;;
        "snowflake")
            configure_snowflake_server "$scope"
            ;;
        "linear")
            configure_linear_server "$scope"
            ;;
        "notion")
            configure_notion_server "$scope"
            ;;
        "github")
            configure_github_server "$scope"
            ;;
        "tavily")
            configure_tavily_server "$scope"
            ;;
        "zen")
            configure_zen_server "$scope"
            ;;
        "mongodb")
            configure_mongodb_server "$scope"
            ;;
        "context7")
            configure_context7_server "$scope"
            ;;
        "interrupt")
            configure_interrupt_server "$scope"
            ;;
        *)
            print_error "Unknown server: $server_key"
            return 1
            ;;
    esac
}

# =============================================================================
# Server Configuration Functions (Simplified for now)
# =============================================================================

configure_aws_server() {
    local scope="${1:-local}"
    if claude mcp add "awslabs.cloudwatch-logs-mcp-server" "$PACKAGE_PATH" \
        awslabs.cloudwatch-logs-mcp-server@latest \
        -s "$scope" \
        -e "AWS_PROFILE=$AWS_PROFILE" \
        -e "AWS_REGION=$AWS_REGION" \
        -e "FASTMCP_LOG_LEVEL=${FASTMCP_LOG_LEVEL:-INFO}" \
        -t stdio; then
        print_success "AWS CloudWatch Logs MCP Server configured successfully"
    else
        print_error "Failed to configure AWS CloudWatch Logs MCP Server"
        return 1
    fi
}

configure_snowflake_server() {
    local scope="${1:-local}"
    if claude mcp add "Snowflake MCP" "$PACKAGE_PATH" \
        -s "$scope" \
        -e "SNOWFLAKE_ACCOUNT=$SNOWFLAKE_ACCOUNT" \
        -e "SNOWFLAKE_USER=$SNOWFLAKE_USER" \
        -e "SNOWFLAKE_PASSWORD=$SNOWFLAKE_PASSWORD" \
        -e "SNOWFLAKE_DATABASE=$SNOWFLAKE_DATABASE" \
        -e "SNOWFLAKE_WAREHOUSE=$SNOWFLAKE_WAREHOUSE" \
        -e "SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA:-TAVILY_LIVE_DATA}" \
        -t stdio -- --python=3.12 mcp_snowflake_server; then
        print_success "Snowflake MCP Server configured successfully"
    else
        print_error "Failed to configure Snowflake MCP Server"
        return 1
    fi
}

configure_linear_server() {
    local scope="${1:-local}"
    if claude mcp add Linear -s "$scope" -- npx -y mcp-remote https://mcp.linear.app/sse; then
        print_success "Linear MCP Server configured successfully"
    else
        print_error "Failed to configure Linear MCP Server"
        return 1
    fi
}

configure_notion_server() {
    local scope="${1:-local}"
    if claude mcp add "notion-mcp-server" "$PACKAGE_PATH" \
        notion-mcp-server@latest \
        -s "$scope" \
        -e "NOTION_API_KEY=$NOTION_API_KEY" \
        -e "FASTMCP_LOG_LEVEL=${FASTMCP_LOG_LEVEL:-INFO}" \
        -t stdio; then
        print_success "Notion MCP Server configured successfully"
    else
        print_error "Failed to configure Notion MCP Server"
        return 1
    fi
}

configure_github_server() {
    local scope="${1:-local}"
    if [ "$GITHUB_MCP_TYPE" = "copilot" ]; then
        if claude mcp add github "https://api.githubcopilot.com/mcp/" \
            -s "$scope" \
            -t http \
            -H "Authorization: Bearer $GITHUB_PAT"; then
            print_success "GitHub Copilot MCP Server configured successfully"
        else
            print_error "Failed to configure GitHub Copilot MCP Server"
            return 1
        fi
    else
        if claude mcp add "github-mcp-server" "$PACKAGE_PATH" \
            github-mcp-server@latest \
            -s "$scope" \
            -e "GITHUB_TOKEN=$GITHUB_TOKEN" \
            -e "FASTMCP_LOG_LEVEL=${FASTMCP_LOG_LEVEL:-INFO}" \
            -t stdio; then
            print_success "GitHub MCP Server configured successfully"
        else
            print_error "Failed to configure GitHub MCP Server"
            return 1
        fi
    fi
}

configure_tavily_server() {
    local scope="${1:-local}"
    if [ "$PACKAGE_MANAGER" = "uvx" ]; then
        # Use uvx for tavily-mcp (if available)
        if claude mcp add "tavily-mcp" "$PACKAGE_PATH" \
            tavily-mcp@latest \
            -s "$scope" \
            -e "TAVILY_API_KEY=$TAVILY_API_KEY" \
            -t stdio; then
            print_success "Tavily MCP Server configured successfully"
        else
            print_error "Failed to configure Tavily MCP Server"
            return 1
        fi
    else
        # Use npx for tavily-mcp (original approach)
        if claude mcp add "tavily-mcp" "npx" \
            -s "$scope" \
            -e "TAVILY_API_KEY=$TAVILY_API_KEY" \
            -t stdio -- -y tavily-mcp@latest; then
            print_success "Tavily MCP Server configured successfully"
        else
            print_error "Failed to configure Tavily MCP Server"
            return 1
        fi
    fi
}

configure_zen_server() {
    local scope="${1:-local}"
    # Look for zen-mcp-server in mcp-setup directory
    local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    local zen_dir="$script_dir/zen-mcp-server"
    local original_dir="$(pwd)"

    if [ -d "$zen_dir" ] && [ -f "$zen_dir/run-server.sh" ]; then
        print_status "Setting up Zen MCP Server..."

        # Update zen's .env file with the OpenAI API key
        cd "$zen_dir"
        if [ -f ".env" ]; then
            # Update existing .env file
            if grep -q "^OPENAI_API_KEY=" .env; then
                # Replace existing OPENAI_API_KEY line
                sed -i.bak "s/^OPENAI_API_KEY=.*/OPENAI_API_KEY=$OPENAI_API_KEY/" .env
            else
                # Add OPENAI_API_KEY if not present
                echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> .env
            fi
        else
            # Create .env file with OpenAI API key
            echo "OPENAI_API_KEY=$OPENAI_API_KEY" > .env
        fi

        print_status "Running zen's built-in setup and configuration..."
        print_status "This will automatically configure Claude Code CLI for you with scope: $scope"

        # Let zen handle its own setup and Claude configuration
        # The run-server.sh script will:
        # 1. Set up the Python environment
        # 2. Install dependencies
        # 3. Automatically configure Claude Code CLI
        # 4. We automatically answer "Y" to the prompt
        # Note: Zen server uses its own configuration method and may not support scope parameter
        if echo "Y" | ./run-server.sh; then
            print_success "Zen MCP Server configured successfully"
            print_status "Zen has been automatically added to Claude Code CLI"
            print_warning "Note: Zen server uses its own configuration method and may use default scope"
            print_status "You can now use zen commands like:"
            print_status "  'Think deeper about this with zen'"
            print_status "  'Use zen to debug this code'"
            print_status "  'Use o3 to analyze this logic error'"
        else
            print_error "Failed to configure Zen MCP Server"
            print_status "You can try running manually:"
            print_status "cd $zen_dir && ./run-server.sh"
            return 1
        fi

        # Return to original directory
        cd "$original_dir"
    else
        print_warning "zen-mcp-server directory not found in mcp-setup directory"
        print_status "Expected location: $zen_dir"
        print_status "Please clone it to the mcp-setup directory:"
        print_status "cd .agent/.claude/mcp-setup"
        print_status "git clone https://github.com/BeehiveInnovations/zen-mcp-server.git"
        print_status "cd zen-mcp-server && ./run-server.sh"
        return 1
    fi
}

configure_mongodb_server() {
    local scope="${1:-local}"
    if claude mcp add "mongodb-mcp-server" "$PACKAGE_PATH" \
        mongodb-mcp-server@latest \
        -s "$scope" \
        -e "MDB_MCP_CONNECTION_STRING=$MDB_MCP_CONNECTION_STRING" \
        -e "DO_NOT_TRACK=1" \
        -e "MDB_MCP_READ_ONLY=true" \
        -e "MDB_MCP_TELEMETRY=disabled" \
        -t stdio; then
        print_success "MongoDB MCP Server configured successfully"
    else
        print_error "Failed to configure MongoDB MCP Server"
        return 1
    fi
}

configure_context7_server() {
    local scope="${1:-local}"
    print_status "Context7 offers multiple connection options:"
    echo ""
    echo "1. Remote HTTP server (recommended)"
    echo "2. Remote SSE server"
    echo "3. Local npm package"
    echo ""
    echo -n "Choose option (1-3): "
    read -r context7_option
    
    case "$context7_option" in
        "1")
            if claude mcp add --transport http context7 https://mcp.context7.com/mcp -s "$scope"; then
                print_success "Context7 HTTP MCP Server configured successfully"
            else
                print_error "Failed to configure Context7 HTTP MCP Server"
                return 1
            fi
            ;;
        "2")
            if claude mcp add --transport sse context7 https://mcp.context7.com/sse -s "$scope"; then
                print_success "Context7 SSE MCP Server configured successfully"
            else
                print_error "Failed to configure Context7 SSE MCP Server"
                return 1
            fi
            ;;
        "3")
            if claude mcp add context7 -s "$scope" -- "$PACKAGE_PATH" $([ "$PACKAGE_MANAGER" = "npx" ] && echo "-y") @upstash/context7-mcp; then
                print_success "Context7 Local MCP Server configured successfully"
            else
                print_error "Failed to configure Context7 Local MCP Server"
                return 1
            fi
            ;;
        *)
            print_error "Invalid option. Using default HTTP server..."
            if claude mcp add --transport http context7 https://mcp.context7.com/mcp -s "$scope"; then
                print_success "Context7 HTTP MCP Server configured successfully"
            else
                print_error "Failed to configure Context7 HTTP MCP Server"
                return 1
            fi
            ;;
    esac
}

configure_interrupt_server() {
    local scope="${1:-local}"
    if claude mcp add "Interrupt User" "$PACKAGE_PATH" \
        ask-human-for-context-mcp \
        -s "$scope" \
        -t stdio; then
        print_success "Interrupt User MCP Server configured successfully"
    else
        print_error "Failed to configure Interrupt User MCP Server"
        return 1
    fi
}

# =============================================================================
# Main Command Handlers
# =============================================================================

cmd_configure() {
    check_env_file
    print_header
    load_env
    
    # Setup package manager based on environment preference or user choice
    if [ -z "${PACKAGE_MANAGER:-}" ]; then
        PACKAGE_MANAGER=$(get_package_manager_selection)
    fi
    setup_package_manager "$PACKAGE_MANAGER"
    print_status "Using package manager: $PACKAGE_MANAGER ($PACKAGE_PATH)"
    
    # Get scope selection upfront for all configurations in this session
    local session_scope
    session_scope=$(get_scope_selection)
    
    while true; do
        show_server_menu
        
        echo -n "Select servers to configure (comma-separated numbers, or 'q' to quit): "
        read -r selection
        
        if [ "$selection" = "q" ] || [ "$selection" = "quit" ]; then
            print_status "Configuration cancelled"
            exit 0
        fi
        
        # Convert server list to array for easier processing
        local server_keys=()
        for key in "${!MCP_SERVERS[@]}"; do
            server_keys+=("$key")
        done
        IFS=$'\n' sorted_keys=($(sort <<<"${server_keys[*]}"))
        unset IFS
        
        local total_servers=${#sorted_keys[@]}
        local configure_all_option=$((total_servers + 1))
        local exit_option=$((total_servers + 2))
        
        # Parse selection
        IFS=',' read -ra SELECTIONS <<< "$selection"
        local servers_to_configure=()
        
        for sel in "${SELECTIONS[@]}"; do
            # Trim whitespace
            sel=$(echo "$sel" | xargs)
            
            if [[ "$sel" =~ ^[0-9]+$ ]]; then
                if [ "$sel" -eq "$configure_all_option" ]; then
                    # Configure all available servers
                    for key in "${sorted_keys[@]}"; do
                        if check_requirements "$key"; then
                            servers_to_configure+=("$key")
                        fi
                    done
                    break
                elif [ "$sel" -eq "$exit_option" ]; then
                    print_status "Exiting..."
                    exit 0
                elif [ "$sel" -ge 1 ] && [ "$sel" -le "$total_servers" ]; then
                    local index=$((sel - 1))
                    local server_key="${sorted_keys[$index]}"
                    if check_requirements "$server_key"; then
                        servers_to_configure+=("$server_key")
                    else
                        print_warning "Skipping ${MCP_SERVERS[$server_key]} - missing requirements"
                    fi
                else
                    print_warning "Invalid selection: $sel"
                fi
            else
                print_warning "Invalid selection: $sel"
            fi
        done
        
        if [ ${#servers_to_configure[@]} -eq 0 ]; then
            print_warning "No valid servers selected"
            continue
        fi
        
        # Configure selected servers using the session scope
        echo ""
        print_step "Configuring ${#servers_to_configure[@]} server(s) with scope: $session_scope..."
        echo ""
        
        local success_count=0
        local total_count=${#servers_to_configure[@]}
        
        for server_key in "${servers_to_configure[@]}"; do
            if configure_server "$server_key" "$session_scope"; then
                success_count=$((success_count + 1))
            fi
            echo ""
        done
        
        echo ""
        print_success "Configuration completed: $success_count/$total_count servers configured successfully"
        
        if [ "$success_count" -gt 0 ]; then
            print_status "To verify configuration, run: claude mcp list"
        fi
        
        echo ""
        echo -n "Configure more servers? (y/N): "
        read -r continue_choice
        if [[ ! "$continue_choice" =~ ^[Yy]$ ]]; then
            break
        fi
    done
}

cmd_list() {
    print_header
    print_step "Currently configured MCP servers:"
    echo ""
    claude mcp list
}

cmd_remove() {
    print_header
    print_step "Currently configured MCP servers:"
    echo ""
    claude mcp list
    echo ""
    
    echo -n "Enter server names to remove (space-separated, or 'all' for all): "
    read -r servers_to_remove
    
    if [ "$servers_to_remove" = "all" ]; then
        echo -n "Are you sure you want to remove ALL MCP servers? (y/N): "
        read -r confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            # Get list of all servers and remove them
            local server_list=$(claude mcp list | cut -d: -f1)
            for server in $server_list; do
                if [ -n "$server" ]; then
                    print_status "Removing $server..."
                    claude mcp remove "$server"
                fi
            done
            print_success "All MCP servers removed"
        else
            print_status "Removal cancelled"
        fi
    else
        for server in $servers_to_remove; do
            print_status "Removing $server..."
            if claude mcp remove "$server"; then
                print_success "$server removed successfully"
            else
                print_error "Failed to remove $server"
            fi
        done
    fi
}

cmd_status() {
    check_env_file
    print_header
    load_env
    
    print_step "MCP Server Status Check:"
    echo ""
    
    for key in "${!MCP_SERVERS[@]}"; do
        local name="${MCP_SERVERS[$key]}"
        local reqs="${MCP_REQUIREMENTS[$key]}"
        
        printf "%-25s " "$name:"
        
        if check_requirements "$key"; then
            echo -e "${GREEN}✓ Requirements met${NC}"
        else
            echo -e "${YELLOW}⚠ Missing: $reqs${NC}"
        fi
    done
    
    echo ""
    print_step "Currently configured servers:"
    claude mcp list
}

# =============================================================================
# Main Entry Point
# =============================================================================

main() {
    case "${1:-}" in
        "configure")
            cmd_configure
            ;;
        "list")
            cmd_list
            ;;
        "remove")
            cmd_remove
            ;;
        "status")
            cmd_status
            ;;
        "help"|"-h"|"--help")
            show_usage
            ;;
        "")
            show_usage
            ;;
        *)
            print_error "Unknown command: $1"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

main "$@"
